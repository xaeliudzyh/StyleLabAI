name: CI
on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.YC_CR_REGISTRY }}

    steps:
    # ─── checkout ───────────────────────────────
    - uses: actions/checkout@v4

    # ─── cache pip ──────────────────────────────
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

    # ─── set up Python ──────────────────────────
    - uses: actions/setup-python@v5
      with: { python-version: "3.11" }

    - run: |
        pip install -r requirements.txt pytest pytest-cov

    - run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

    - run: |
        pip install -r requirements.txt pytest pytest-cov

    # ─── tests ──────────────────────────────────
    - run: pytest -q --junitxml=test-results.xml
    - uses: actions/upload-artifact@v4
      with: { name: pytest-report, path: test-results.xml }

    # ─── docker buildx w/ cache — API only ──────
    - uses: docker/setup-buildx-action@v3

    - name: Login to Yandex CR
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: ${{ secrets.YC_CR_USER }}
        password: ${{ secrets.YC_CR_PASSWORD }}

    - name: Build & push style-api
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          cr.yandex/${{ env.REGISTRY }}/style-api:${{ github.sha }}
          cr.yandex/${{ env.REGISTRY }}/style-api:latest
        cache-from: type=gha
        cache-to:   type=gha,mode=max

  deploy-infra:
    name: Terraform & K8s deploy
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - uses: actions/checkout@v4

      # cache terraform plugins
      - uses: actions/cache@v4
        with:
          path: iac/terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('iac/terraform/*.tf') }}

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.6.x }

      - name: Terraform apply
        run: |
          cd iac/terraform
          terraform init -input=false
          terraform apply -auto-approve \
            -var "yc_token=${{ secrets.YC_IAM_TOKEN }}" \
            -var "cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var "folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var "registry=${{ secrets.YC_CR_REGISTRY }}" \
            -var "iam_sa_id=${{ secrets.IAM_SA_ID }}" \
            -var "node_sa_id=${{ secrets.NODE_SA_ID }}"

      # ─── kubectl + kubeconfig ─────────────────────────────────
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with: { version: 'v1.28.2' }

      - name: Get kubeconfig
        run: yc managed-kubernetes cluster get-credentials style-cluster --external
        env:
          YCH_TOKEN: ${{ secrets.YC_IAM_TOKEN }}
          YCH_CLOUD: ${{ secrets.YC_CLOUD_ID }}
          YCH_FOLD: ${{ secrets.YC_FOLDER_ID }}

      # ─── Deploy manifests ─────────────────────────────────────
      - name: Apply manifests (app + HPA)
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml

      # ─── Monitoring stack ─────────────────────────────────────
      - name: Install kube-prometheus-stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace
